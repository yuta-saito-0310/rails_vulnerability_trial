import { Controller } from "@hotwired/stimulus";

export default class extends Controller {
  static targets = ["summary", "content"];

  // ソースコードの参考: https://milk1000cc.hatenablog.com/entry/2022/02/07/120321

  connect() {
    this.resetState();
  }

  resetState() {
    this.animation = null;
    this.isCollapsing = false;
    this.isExpanding = false;
  }

  // summary要素をクリックしたときに、開閉を切り替える役割をするメソッド
  toggle(event) {
    // details要素はopen属性の値によって自動で表示と非表示を切り替えてしまう為アニメーションを設定できない。
    // 開閉動作をアニメーションで表示したいため、この挙動を無効化する。
    // 参考：https://ics.media/entry/220901/
    event.preventDefault();
    this.element.style.overflow = "hidden";

    // 開閉アニメーション中であるかのステータスとdetails要素が所持する開閉ステータスを参照して表示を切り替える
    if (this.isCollapsing || !this.element.open) {
      this.prepareForExpansion();
    } else if (this.isExpanding || this.element.open) {
      this.prepareForCollapse();
    }
  }

  // リストを開くための準備から実行までを行うメソッド
  prepareForExpansion() {
    this.element.style.height = `${this.element.offsetHeight}px`;
    this.element.open = true;

    window.requestAnimationFrame(() => this.executeExpansion());
  }

  executeExpansion() {
    this.isExpanding = true;

    const startHeight = `${this.element.offsetHeight}px`;
    const endHeight = `${
      this.summaryTarget.offsetHeight + this.contentTarget.offsetHeight
    }px`;

    // summaryクリック時に既に折りたたみアニメーションが実行されていたらそれをキャンセルしておく
    if (this.animation) {
      this.animation.cancel();
    }

    this.animation = this.animateHeightTransition(startHeight, endHeight);

    this.animation.onfinish = () => this.onAnimationFinish(true);
    this.animation.oncancel = () => (this.isExpanding = false);
  }

  // リストを折り畳むための準備から実行までを行うメソッド
  prepareForCollapse() {
    this.isCollapsing = true;

    const startHeight = `${this.element.offsetHeight}px`;
    const endHeight = `${this.summaryTarget.offsetHeight}px`;

    // summaryクリック時に既に開示アニメーションが実行されていたらそれをキャンセルしておく
    if (this.animation) {
      this.animation.cancel();
    }

    window.requestAnimationFrame(() =>
      this.executeCollapse(startHeight, endHeight)
    );
  }

  executeCollapse(startHeight, endHeight) {
    this.animation = this.animateHeightTransition(startHeight, endHeight);

    this.animation.onfinish = () => this.onAnimationFinish(false);
    this.animation.oncancel = () => (this.isCollapsing = false);
  }

  // 指定した高さでアニメーションを実行する
  animateHeightTransition(startHeight, endHeight) {
    return this.element.animate(
      {
        height: [startHeight, endHeight],
      },
      {
        duration: 200,
        easing: "ease-out",
      }
    );
  }

  // アニメーションが終了したら、details要素のopenの状態をクリック操作と合わせ、他のステータスは初期状態に戻す
  onAnimationFinish(is_open) {
    this.element.open = is_open;

    this.resetState();
    this.element.style.height = this.element.style.overflow = "";
  }
}
